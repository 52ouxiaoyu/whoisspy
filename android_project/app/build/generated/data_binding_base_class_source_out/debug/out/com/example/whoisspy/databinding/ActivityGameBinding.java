// Generated by view binder compiler. Do not edit!
package com.example.whoisspy.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.whoisspy.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGameBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton buttonFinishViewing;

  @NonNull
  public final MaterialButton buttonNewGame;

  @NonNull
  public final MaterialButton buttonStartSpeech;

  @NonNull
  public final MaterialButton buttonStartVote;

  @NonNull
  public final MaterialButton buttonViewNext;

  @NonNull
  public final CardView cardViewWord;

  @NonNull
  public final LinearLayout linearLayoutBottomActions;

  @NonNull
  public final LinearLayout linearLayoutGameEndButtons;

  @NonNull
  public final LinearLayout linearLayoutGameResult;

  @NonNull
  public final LinearLayout linearLayoutStatusBar;

  @NonNull
  public final LinearLayout linearLayoutVoteOptions;

  @NonNull
  public final LinearLayout linearLayoutVoteSection;

  @NonNull
  public final RecyclerView recyclerViewPlayers;

  @NonNull
  public final RecyclerView recyclerViewSpeechRecord;

  @NonNull
  public final TextView textViewCurrentTurn;

  @NonNull
  public final TextView textViewGameResultTitle;

  @NonNull
  public final TextView textViewGameStatus;

  @NonNull
  public final TextView textViewPlayerListTitle;

  @NonNull
  public final TextView textViewSpeechRecordTitle;

  @NonNull
  public final TextView textViewVoteTitle;

  @NonNull
  public final TextView textViewWinner;

  @NonNull
  public final TextView textViewWordReveal;

  @NonNull
  public final TextView textViewWordValue;

  @NonNull
  public final TextView textViewYourWord;

  private ActivityGameBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton buttonFinishViewing, @NonNull MaterialButton buttonNewGame,
      @NonNull MaterialButton buttonStartSpeech, @NonNull MaterialButton buttonStartVote,
      @NonNull MaterialButton buttonViewNext, @NonNull CardView cardViewWord,
      @NonNull LinearLayout linearLayoutBottomActions,
      @NonNull LinearLayout linearLayoutGameEndButtons,
      @NonNull LinearLayout linearLayoutGameResult, @NonNull LinearLayout linearLayoutStatusBar,
      @NonNull LinearLayout linearLayoutVoteOptions, @NonNull LinearLayout linearLayoutVoteSection,
      @NonNull RecyclerView recyclerViewPlayers, @NonNull RecyclerView recyclerViewSpeechRecord,
      @NonNull TextView textViewCurrentTurn, @NonNull TextView textViewGameResultTitle,
      @NonNull TextView textViewGameStatus, @NonNull TextView textViewPlayerListTitle,
      @NonNull TextView textViewSpeechRecordTitle, @NonNull TextView textViewVoteTitle,
      @NonNull TextView textViewWinner, @NonNull TextView textViewWordReveal,
      @NonNull TextView textViewWordValue, @NonNull TextView textViewYourWord) {
    this.rootView = rootView;
    this.buttonFinishViewing = buttonFinishViewing;
    this.buttonNewGame = buttonNewGame;
    this.buttonStartSpeech = buttonStartSpeech;
    this.buttonStartVote = buttonStartVote;
    this.buttonViewNext = buttonViewNext;
    this.cardViewWord = cardViewWord;
    this.linearLayoutBottomActions = linearLayoutBottomActions;
    this.linearLayoutGameEndButtons = linearLayoutGameEndButtons;
    this.linearLayoutGameResult = linearLayoutGameResult;
    this.linearLayoutStatusBar = linearLayoutStatusBar;
    this.linearLayoutVoteOptions = linearLayoutVoteOptions;
    this.linearLayoutVoteSection = linearLayoutVoteSection;
    this.recyclerViewPlayers = recyclerViewPlayers;
    this.recyclerViewSpeechRecord = recyclerViewSpeechRecord;
    this.textViewCurrentTurn = textViewCurrentTurn;
    this.textViewGameResultTitle = textViewGameResultTitle;
    this.textViewGameStatus = textViewGameStatus;
    this.textViewPlayerListTitle = textViewPlayerListTitle;
    this.textViewSpeechRecordTitle = textViewSpeechRecordTitle;
    this.textViewVoteTitle = textViewVoteTitle;
    this.textViewWinner = textViewWinner;
    this.textViewWordReveal = textViewWordReveal;
    this.textViewWordValue = textViewWordValue;
    this.textViewYourWord = textViewYourWord;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGameBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGameBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_game, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGameBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonFinishViewing;
      MaterialButton buttonFinishViewing = ViewBindings.findChildViewById(rootView, id);
      if (buttonFinishViewing == null) {
        break missingId;
      }

      id = R.id.buttonNewGame;
      MaterialButton buttonNewGame = ViewBindings.findChildViewById(rootView, id);
      if (buttonNewGame == null) {
        break missingId;
      }

      id = R.id.buttonStartSpeech;
      MaterialButton buttonStartSpeech = ViewBindings.findChildViewById(rootView, id);
      if (buttonStartSpeech == null) {
        break missingId;
      }

      id = R.id.buttonStartVote;
      MaterialButton buttonStartVote = ViewBindings.findChildViewById(rootView, id);
      if (buttonStartVote == null) {
        break missingId;
      }

      id = R.id.buttonViewNext;
      MaterialButton buttonViewNext = ViewBindings.findChildViewById(rootView, id);
      if (buttonViewNext == null) {
        break missingId;
      }

      id = R.id.cardViewWord;
      CardView cardViewWord = ViewBindings.findChildViewById(rootView, id);
      if (cardViewWord == null) {
        break missingId;
      }

      id = R.id.linearLayoutBottomActions;
      LinearLayout linearLayoutBottomActions = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutBottomActions == null) {
        break missingId;
      }

      id = R.id.linearLayoutGameEndButtons;
      LinearLayout linearLayoutGameEndButtons = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutGameEndButtons == null) {
        break missingId;
      }

      id = R.id.linearLayoutGameResult;
      LinearLayout linearLayoutGameResult = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutGameResult == null) {
        break missingId;
      }

      id = R.id.linearLayoutStatusBar;
      LinearLayout linearLayoutStatusBar = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutStatusBar == null) {
        break missingId;
      }

      id = R.id.linearLayoutVoteOptions;
      LinearLayout linearLayoutVoteOptions = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutVoteOptions == null) {
        break missingId;
      }

      id = R.id.linearLayoutVoteSection;
      LinearLayout linearLayoutVoteSection = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutVoteSection == null) {
        break missingId;
      }

      id = R.id.recyclerViewPlayers;
      RecyclerView recyclerViewPlayers = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewPlayers == null) {
        break missingId;
      }

      id = R.id.recyclerViewSpeechRecord;
      RecyclerView recyclerViewSpeechRecord = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewSpeechRecord == null) {
        break missingId;
      }

      id = R.id.textViewCurrentTurn;
      TextView textViewCurrentTurn = ViewBindings.findChildViewById(rootView, id);
      if (textViewCurrentTurn == null) {
        break missingId;
      }

      id = R.id.textViewGameResultTitle;
      TextView textViewGameResultTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewGameResultTitle == null) {
        break missingId;
      }

      id = R.id.textViewGameStatus;
      TextView textViewGameStatus = ViewBindings.findChildViewById(rootView, id);
      if (textViewGameStatus == null) {
        break missingId;
      }

      id = R.id.textViewPlayerListTitle;
      TextView textViewPlayerListTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewPlayerListTitle == null) {
        break missingId;
      }

      id = R.id.textViewSpeechRecordTitle;
      TextView textViewSpeechRecordTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewSpeechRecordTitle == null) {
        break missingId;
      }

      id = R.id.textViewVoteTitle;
      TextView textViewVoteTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewVoteTitle == null) {
        break missingId;
      }

      id = R.id.textViewWinner;
      TextView textViewWinner = ViewBindings.findChildViewById(rootView, id);
      if (textViewWinner == null) {
        break missingId;
      }

      id = R.id.textViewWordReveal;
      TextView textViewWordReveal = ViewBindings.findChildViewById(rootView, id);
      if (textViewWordReveal == null) {
        break missingId;
      }

      id = R.id.textViewWordValue;
      TextView textViewWordValue = ViewBindings.findChildViewById(rootView, id);
      if (textViewWordValue == null) {
        break missingId;
      }

      id = R.id.textViewYourWord;
      TextView textViewYourWord = ViewBindings.findChildViewById(rootView, id);
      if (textViewYourWord == null) {
        break missingId;
      }

      return new ActivityGameBinding((ConstraintLayout) rootView, buttonFinishViewing,
          buttonNewGame, buttonStartSpeech, buttonStartVote, buttonViewNext, cardViewWord,
          linearLayoutBottomActions, linearLayoutGameEndButtons, linearLayoutGameResult,
          linearLayoutStatusBar, linearLayoutVoteOptions, linearLayoutVoteSection,
          recyclerViewPlayers, recyclerViewSpeechRecord, textViewCurrentTurn,
          textViewGameResultTitle, textViewGameStatus, textViewPlayerListTitle,
          textViewSpeechRecordTitle, textViewVoteTitle, textViewWinner, textViewWordReveal,
          textViewWordValue, textViewYourWord);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
